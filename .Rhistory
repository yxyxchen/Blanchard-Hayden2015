paste0("allJuiceAmounts_", 1:17)))
# clean
truncateIdxs = tempt %>% group_by(id) %>% summarise(max(which(choiceMade == "leave"))) +
cumsum(c(0, head(sapply(trialData[hdrData$task == "forage"], nrow), -1)))
endIdxs = cumsum(c(sapply(trialData[hdrData$task == "forage"], nrow)))
junk = list()
for(i in 1 : length(endIdxs)){
a = truncateIdxs[i,2]
b = endIdxs[i]
junk[[i]] = (a+1) : b
}
delete = unlist(junk)
tempt = tempt[!(1 : nrow(tempt) %in% delete), ]
# calculate stay lengths
group = c(0, head(cumsum(tempt$choiceMade == "leave"), -1))
tempt$group = group
nStay = table(group)
uniGroup = unique(group)
nStay = nStay - 1 # since leave is counted as a stay as well
forageData = tempt[which(tempt$choiceMade == "leave")-1,]
forageData$nStay = nStay
a = tempt[tempt$group %in% uniGroup[which(nStay >= 20 )],]
View(a)
library("tidyverse")
source("subFxs/loadFxs.R")
source("subFxs/plotThemes.R")
source("subFxs/helpFxs.R")
dir.create("figures")
dir.create("figures/forageAnalysis")
# load data
allData = loadAll()
hdrData = allData$hdrData
trialData = allData$trialData
hdrData$nTrial =  sapply(trialData,nrow)
# prepare data
subs = unique(hdrData$sub)
nSub = length(subs)
tempt = do.call(rbind, trialData[hdrData$task == "forage"])
tempt$sub = rep(hdrData$sub[hdrData$task == "forage"],
sapply(trialData[hdrData$task == "forage"],nrow))
tempt$sess = rep(as.numeric(hdrData$sess[hdrData$task == "forage"]),
sapply(trialData[hdrData$task == "forage"],nrow))
tempt$id = rep(hdrData$id[hdrData$task == "forage"],
sapply(trialData[hdrData$task == "forage"],nrow))
tempt$lastTrial = c(ifelse(tail(tempt$trial, -1) == 1, T, F), T)
constants = tempt[1,c("timeToFixate", "minFixTimeToStart", "holdFixTime",
"timeToChoose", "ITI", "shrinkRate", "handlingTime",
paste0("allJuiceAmounts_", 1:17))]
tempt = tempt %>% select(-c("timeToFixate", "minFixTimeToStart", "holdFixTime",
"timeToChoose", "ITI", "shrinkRate", "handlingTime",
paste0("allJuiceAmounts_", 1:17)))
# clean
truncateIdxs = tempt %>% group_by(id) %>% summarise(max(which(choiceMade == "leave"))) +
cumsum(c(0, head(sapply(trialData[hdrData$task == "forage"], nrow), -1)))
endIdxs = cumsum(c(sapply(trialData[hdrData$task == "forage"], nrow)))
junk = list()
for(i in 1 : length(endIdxs)){
a = truncateIdxs[i,2]
b = endIdxs[i]
junk[[i]] = (a+1) : b
}
delete = unlist(junk)
tempt = tempt[!(1 : nrow(tempt) %in% delete), ]
# calculate stay lengths
group = c(0, head(cumsum(tempt$choiceMade == "leave"), -1))
tempt$group = group
nStay = table(group)
uniGroup = unique(group)
nStay = nStay - 1 # since leave is counted as a stay as well
forageData = tempt[which(tempt$choiceMade == "leave")-1,]
forageData$nStay = nStay
forageData %>% filter(forageData$nStay <= 17) %>% group_by(sub, foragingTime) %>%
dplyr::summarise(mu = mean(nStay)) %>%
ggplot(aes(factor(foragingTime), mu)) +
geom_bar(stat = "identity") + facet_grid(~sub) + myTheme
View(hdrData)
forageData %>% filter(forageData$id == "1") %>% group_by(sub, foragingTime) %>%
dplyr::summarise(mu = mean(nStay)) %>%
ggplot(aes(factor(foragingTime), mu)) +
geom_bar(stat = "identity") + facet_grid(~sub) + myTheme
forageData %>% filter(forageData$id == "1") %>% group_by(sub, foragingTime) %>%
dplyr::summarise(mu = mean(nStay))
forageData %>% group_by(sub, foragingTime) %>%
dplyr::summarise(mu = mean(nStay))
forageData %>% filter(forageData$id == "2") %>% group_by(sub, foragingTime) %>%
dplyr::summarise(mu = mean(nStay))
forageData %>% filter(forageData$id == "2") %>% group_by(sub, foragingTime) %>%
dplyr::summarise(mu = mean(nStay))
forageData$id
forageData %>% filter(forageData$id == "3") %>% group_by(sub, foragingTime) %>%
dplyr::summarise(mu = mean(nStay))
forageData %>% filter(forageData$id == "4") %>% group_by(sub, foragingTime) %>%
dplyr::summarise(mu = mean(nStay))
# plot stay lengths
forageData %>% filter(forageData$id == "3")  %>% group_by(sub, foragingTime) %>%
ggplot(aes(nStay)) +
geom_histogram() + facet_grid(foragingTime~sub) + myTheme
# plot stay lengths
forageData %>% filter(forageData$id == "1")  %>% group_by(sub, foragingTime) %>%
ggplot(aes(nStay)) +
geom_histogram() + facet_grid(foragingTime~sub) + myTheme
# plot stay lengths
forageData %>% filter(forageData$id == "2")  %>% group_by(sub, foragingTime) %>%
ggplot(aes(nStay)) +
geom_histogram() + facet_grid(foragingTime~sub) + myTheme
# plot stay lengths
forageData %>% filter(forageData$id == "5")  %>% group_by(sub, foragingTime) %>%
ggplot(aes(nStay)) +
geom_histogram() + facet_grid(foragingTime~sub) + myTheme
# plot stay lengths
forageData %>% filter(forageData$id == "1")  %>% group_by(sub, foragingTime) %>%
ggplot(aes(nStay)) +
geom_histogram() + facet_grid(foragingTime~sub) + myTheme
# plot stay lengths
forageData %>% filter(forageData$id == "10")  %>% group_by(sub, foragingTime) %>%
ggplot(aes(nStay)) +
geom_histogram() + facet_grid(foragingTime~sub) + myTheme
# plot stay lengths
forageData %>% group_by(sub, foragingTime) %>%
ggplot(aes(nStay)) +
geom_histogram() + facet_grid(foragingTime~sub) + myTheme
library("tidyverse")
source("subFxs/loadFxs.R")
source("subFxs/plotThemes.R")
source("subFxs/helpFxs.R")
dir.create("figures")
dir.create("figures/forageAnalysis")
# load data
allData = loadAll()
hdrData = allData$hdrData
trialData = allData$trialData
hdrData$nTrial =  sapply(trialData,nrow)
# prepare data
subs = unique(hdrData$sub)
nSub = length(subs)
tempt = do.call(rbind, trialData[hdrData$task == "forage"])
tempt$sub = rep(hdrData$sub[hdrData$task == "forage"],
sapply(trialData[hdrData$task == "forage"],nrow))
tempt$sess = rep(as.numeric(hdrData$sess[hdrData$task == "forage"]),
sapply(trialData[hdrData$task == "forage"],nrow))
tempt$id = rep(hdrData$id[hdrData$task == "forage"],
sapply(trialData[hdrData$task == "forage"],nrow))
tempt$lastTrial = c(ifelse(tail(tempt$trial, -1) == 1, T, F), T)
constants = tempt[1,c("timeToFixate", "minFixTimeToStart", "holdFixTime",
"timeToChoose", "ITI", "shrinkRate", "handlingTime",
paste0("allJuiceAmounts_", 1:17))]
tempt = tempt %>% select(-c("timeToFixate", "minFixTimeToStart", "holdFixTime",
"timeToChoose", "ITI", "shrinkRate", "handlingTime",
paste0("allJuiceAmounts_", 1:17)))
# clean
truncateIdxs = tempt %>% group_by(id) %>% summarise(max(which(choiceMade == "leave"))) +
cumsum(c(0, head(sapply(trialData[hdrData$task == "forage"], nrow), -1)))
endIdxs = cumsum(c(sapply(trialData[hdrData$task == "forage"], nrow)))
junk = list()
for(i in 1 : length(endIdxs)){
a = truncateIdxs[i,2]
b = endIdxs[i]
junk[[i]] = (a+1) : b
}
delete = unlist(junk)
tempt = tempt[!(1 : nrow(tempt) %in% delete), ]
# calculate stay lengths
group = c(0, head(cumsum(tempt$choiceMade == "leave"), -1))
tempt$group = group
nStay = table(group)
uniGroup = unique(group)
nStay = nStay - 1 # since leave is counted as a stay as well
nStay = pmin(nStay, 17)
forageData = tempt[which(tempt$choiceMade == "leave")-1,]
forageData$nStay = nStay
library("tidyverse")
source("subFxs/loadFxs.R")
source("subFxs/plotThemes.R")
source("subFxs/helpFxs.R")
dir.create("figures")
dir.create("figures/forageAnalysis")
# load data
allData = loadAll()
hdrData = allData$hdrData
trialData = allData$trialData
hdrData$nTrial =  sapply(trialData,nrow)
# prepare data
subs = unique(hdrData$sub)
nSub = length(subs)
tempt = do.call(rbind, trialData[hdrData$task == "forage"])
tempt$sub = rep(hdrData$sub[hdrData$task == "forage"],
sapply(trialData[hdrData$task == "forage"],nrow))
tempt$sess = rep(as.numeric(hdrData$sess[hdrData$task == "forage"]),
sapply(trialData[hdrData$task == "forage"],nrow))
tempt$id = rep(hdrData$id[hdrData$task == "forage"],
sapply(trialData[hdrData$task == "forage"],nrow))
tempt$lastTrial = c(ifelse(tail(tempt$trial, -1) == 1, T, F), T)
constants = tempt[1,c("timeToFixate", "minFixTimeToStart", "holdFixTime",
"timeToChoose", "ITI", "shrinkRate", "handlingTime",
paste0("allJuiceAmounts_", 1:17))]
tempt = tempt %>% select(-c("timeToFixate", "minFixTimeToStart", "holdFixTime",
"timeToChoose", "ITI", "shrinkRate", "handlingTime",
paste0("allJuiceAmounts_", 1:17)))
# clean
truncateIdxs = tempt %>% group_by(id) %>% summarise(max(which(choiceMade == "leave"))) +
cumsum(c(0, head(sapply(trialData[hdrData$task == "forage"], nrow), -1)))
endIdxs = cumsum(c(sapply(trialData[hdrData$task == "forage"], nrow)))
junk = list()
for(i in 1 : length(endIdxs)){
a = truncateIdxs[i,2]
b = endIdxs[i]
junk[[i]] = (a+1) : b
}
delete = unlist(junk)
tempt = tempt[!(1 : nrow(tempt) %in% delete), ]
# calculate stay lengths
group = c(0, head(cumsum(tempt$choiceMade == "leave"), -1))
tempt$group = group
nStay = table(group)
uniGroup = unique(group)
nStay = nStay - 1 # since leave is counted as a stay as well
nStay = pmin(nStay, 17)
forageData = tempt[which(tempt$choiceMade == "leave")-1,]
forageData$nStay = nStay
# plot stay lengths
forageData %>% group_by(sub, foragingTime) %>%
ggplot(aes(nStay)) +
geom_histogram() + facet_grid(foragingTime~sub) + myTheme
forageData %>% filter(forageData$id == "4") %>% group_by(sub, foragingTime) %>%
dplyr::summarise(mu = mean(nStay)) %>%
ggplot(aes(factor(foragingTime), mu)) +
geom_bar(stat = "identity") + facet_grid(~sub) + myTheme
forageData %>% group_by(sub, foragingTime) %>%
dplyr::summarise(mu = mean(nStay)) %>%
ggplot(aes(factor(foragingTime), mu)) +
geom_bar(stat = "identity") + facet_grid(~sub) + myTheme
View(tempt)
constants
source('~/Documents/blanchard_2015 copy/timeAnalysis.R', echo=TRUE)
# load libraries
library("tidyverse")
source("subFxs/loadFxs.R")
source("subFxs/plotThemes.R")
source("subFxs/helpFxs.R")
dir.create("figures")
dir.create("figures/forageAnalysis")
# load data
allData = loadAll()
hdrData = allData$hdrData
trialData = allData$trialData
hdrData$nTrial =  sapply(trialData,nrow) # add number of trials
hdrData$foragingTime = rep(NA, nrow(hdrData)) # add foraging time if applicable
hdrData$foragingTime[hdrData$task == "forage"] =  sapply(trialData[hdrData$task == "forage"], function(x) unique(x$foragingTime))
# subjects
subs = unique(hdrData$sub)
nSub = length(subs)
###################### prepare data ##############################
select = hdrData$task == "forage"
tempt = do.call(rbind, trialData[select])
tempt$sub = rep(hdrData$sub[select],
sapply(trialData[select],nrow))
tempt$sess = rep(as.numeric(hdrData$sess[select]),
sapply(trialData[select],nrow))
tempt$id = rep(hdrData$id[select],
sapply(trialData[select],nrow))
tempt$date = rep(hdrData$date[select],
sapply(trialData[select],nrow))
tempt$lastTrial = c(ifelse(tail(tempt$trial, -1) == 1, T, F), T)
# exclude constant columns
constants = tempt[1,c("timeToFixate", "minFixTimeToStart", "holdFixTime",
"timeToChoose", "ITI", "shrinkRate", "handlingTime",
paste0("allJuiceAmounts_", 1:17))]
tempt = tempt %>% select(-c("timeToFixate", "minFixTimeToStart", "holdFixTime",
"timeToChoose", "ITI", "shrinkRate", "handlingTime",
paste0("allJuiceAmounts_", 1:17)))
# truncate the last block at the end of each session to avoid right censoring
startIdxs = tempt %>% group_by(id) %>% summarise(max(which(choiceMade == "leave"))) +
cumsum(c(0, head(sapply(trialData[select], nrow), -1)))
endIdxs = cumsum(c(sapply(trialData[select], nrow)))
junk = list()
for(i in 1 : length(endIdxs)){
a = startIdxs[i,2]
b = endIdxs[i]
junk[[i]] = (a+1) : b
}
delete = unlist(junk)
tempt = tempt[(!(1 : nrow(tempt) %in% delete)), ]
######################### stay lengths ###########################
# calculate stay lengths
block = cumsum(tempt$choiceMade == "leave")
tempt$block = block
nStay = table(block)
nStay[2 : length(nStay)] = nStay[2 : length(nStay)] - 1 # since leave is counted as a stay as well after the first block
# nStay = pmin(nStay, 17)
forageData = tempt[which(tempt$choiceMade == "leave")-1,]
forageData$nStay = head(nStay, -1)
# replicate Figure 3
forageData  %>% group_by(sub, foragingTime) %>%
dplyr::summarise(mu = mean(nStay)) %>%
ggplot(aes(factor(foragingTime), mu)) +
geom_bar(stat = "identity") + facet_grid(~sub) + myTheme +
xlab("Traveling time") + ylab("Number of stays in a patch")
# plot hist of stay lengths for Monkey  H
forageData %>% filter(sub == "H") %>% group_by(date, foragingTime) %>%
ggplot(aes(nStay)) +
geom_histogram() + facet_grid(foragingTime~date) + myTheme +
xlab("Number of stays in a patch") + ylab("Count")
# replicate Figure 3
forageData  %>% group_by(sub, foragingTime) %>%
dplyr::summarise(mu = mean(nStay)) %>%
ggplot(aes(factor(foragingTime), mu)) +
geom_bar(stat = "identity") + facet_grid(~sub) + myTheme +
xlab("Traveling time") + ylab("Number of stays in a patch")
# plot hist of stay lengths for Monkey  H
forageData %>% filter(sub == "H") %>% group_by(date, foragingTime) %>%
ggplot(aes(nStay)) +
geom_histogram() + facet_grid(foragingTime~date) + myTheme +
xlab("Number of stays in a patch") + ylab("Count")
# plot hist of stay lengths for Monkey  J
forageData %>% filter(sub == "J") %>% group_by(date, foragingTime) %>%
ggplot(aes(nStay)) +
geom_histogram() + facet_grid(foragingTime~date) + myTheme +
xlab("Number of stays in a patch") + ylab("Count")
source('~/Documents/blanchard_2015/subFxs/helpFxs.R')
# load libraries
library("tidyverse")
source("subFxs/loadFxs.R")
source("subFxs/plotThemes.R")
source("subFxs/helpFxs.R")
dir.create("figures")
dir.create("figures/timeAnalysis")
# load data
allData = loadAll()
hdrData = allData$hdrData
trialData = allData$trialData
rwds = c(75, 97, 135, 175, 212)
# prepare data
subs = unique(hdrData$sub)
nSub = length(subs)
timeData = do.call(rbind, trialData[hdrData$task == "time"])
timeData$leftRwd = sapply(timeData$leftcolor, FUN = function(x) rwds[x-1])
timeData$rightRwd = sapply(timeData$rightcolor, FUN = function(x) rwds[x-1])
timeData$rwdDiff = abs(timeData$leftRwd - timeData$rightRwd)
timeData$waitDiff = abs(timeData$leftwait - timeData$rightwait)
timeData$smallRwd = pmin(timeData$rightRwd, timeData$leftRwd)
timeData$sub = rep(hdrData$sub[hdrData$task == "time"],
sapply(trialData[hdrData$task == "time"],nrow))
timeData$SS = (timeData$choice == 1 & timeData$leftcolor < timeData$rightcolor) |
(timeData$choice == 2 & timeData$leftcolor > timeData$rightcolor)# whether choose the sooner/smaller option
# plot pSS
timeData %>%
mutate(rwdDiff = cut(rwdDiff, c(20, 60, 100, 140)),
waitDiff = cut(waitDiff, seq(0, 6, length.out = 7), labels = (0:5 + 1:6) / 2)) %>%
group_by(rwdDiff, waitDiff, sub) %>%
dplyr::summarise(pSS = mean(SS)) %>%
ggplot(aes(waitDiff, pSS, color = rwdDiff)) +
geom_point() + facet_grid(~sub) +
ylab("SS choice (%)") + xlab("Delay difference (s)") +
myTheme
######################### discounting rate #########################
for(sIdx in 1 : nSub){
thisSub = subs[sIdx]
data = timeData[timeData$sub == thisSub,]
# estimate exponential discount factor
## c is the discounting factor as in Kable and Glimcher, 2007
## tau is the softmax parameter
cInits = seq(0.2, 1, length.out = 5)
tauInits = seq(0.001, 0.1, length.out = 5)
expLoss = 1000000
for(cInit in cInits){
for(tauInit in tauInits){
optimResults = optim(c(cInit, tauInit), expMatchLossFun,lower = c(0, 0), data = data)
if(optimResults$value < expLoss){
expLoss = optimResults$value
expParas = optimResults$par
}
}
}
c = expParas[1]
# estimate hyperbolic discount factor
## k is the discounting factor as in Kable and Glimcher, 2007
## tau is the softmax parameter
kInits = seq(0.2, 5, length.out = 5)
tauInits = seq(0.001, 0.2, length.out = 5)
hyperLoss = 1000000
for(kInit in kInits){
for(tauInit in tauInit){
optimResults = optim(c(kInit, tauInit), hyperMatchLossFun,lower = c(0, 0), data = data)
if(optimResults$value == 1000000){
print("failed")
}
if(optimResults$value < hyperLoss){
hyperLoss= optimResults$value
hyperParas = optimResults$par
}
}
}
k = hyperParas[1]
print(hyperParas)
# make predictions for the hyperbolic model
data$pSSHatExp = expMatchPredict(expParas, data)
data$pSSHatHyper = hyperMatchPredict(hyperParas, data)
data = data %>% mutate(
smallRwd = pmin(leftRwd, rightRwd),
largeRwd = pmax(leftRwd, rightRwd),
smallwait = pmin(leftwait, rightwait),
largewait = pmax(leftwait, rightwait),
diffExpSV = exp(-c * smallwait) * smallRwd - exp(-c * largewait) * largeRwd,
diffHyperSV = smallRwd / (1 + k * smallwait) - largeRwd / (1 + k * largewait)
)
nCut = 7
limits = seq(min(data$diffHyperSV), max(data$diffHyperSV), length.out = nCut + 1)
limits[1] = min(data$diffHyperSV) - 0.1
limits[length(limits)] = max(data$diffHyperSV) + 0.1
mids = (head(limits, -1) + tail(limits, -1)) / 2
# plot for the hyperbolic model
data %>% mutate(
diffHyperSV= cut(diffHyperSV, breaks = limits)
) %>% mutate(
diffHyperSV = as.numeric(diffHyperSV),
preference = mids[diffHyperSV]
) %>%
group_by(preference) %>%
dplyr::summarise(mu = mean(SS),
se = sd(SS) / sqrt(length(SS)),
min = mu - se,
max = mu + se,
n = length(SS),
muHat = mean(pSSHatHyper)) %>%
ggplot(aes(preference, mu)) + geom_point() +
geom_errorbar(aes(ymin = min, ymax = max)) +
geom_line(aes(preference, muHat), linetype = "dashed") +
myTheme + xlab("Preference for SS") +
ylab("SS choice (%)") + ylim(c(0, 1)) +
ggtitle(sprintf("%s, k = %.2f, tau = %.2f", thisSub, hyperParas[1], hyperParas[2]))
ggsave(sprintf("figures/timeAnalysis/predict_%s.png", thisSub), width = 3, height = 4.5)
}
source('~/Documents/blanchard_2015/subFxs/helpFxs.R')
######################### discounting rate #########################
for(sIdx in 1 : nSub){
thisSub = subs[sIdx]
data = timeData[timeData$sub == thisSub,]
# estimate exponential discount factor
## c is the discounting factor as in Kable and Glimcher, 2007
## tau is the softmax parameter
cInits = seq(0.2, 1, length.out = 5)
tauInits = seq(0.001, 0.1, length.out = 5)
expLoss = 1000000
for(cInit in cInits){
for(tauInit in tauInits){
optimResults = optim(c(cInit, tauInit), expMatchLossFun,lower = c(0, 0), data = data)
if(optimResults$value < expLoss){
expLoss = optimResults$value
expParas = optimResults$par
}
}
}
c = expParas[1]
# estimate hyperbolic discount factor
## k is the discounting factor as in Kable and Glimcher, 2007
## tau is the softmax parameter
kInits = seq(0.2, 5, length.out = 5)
tauInits = seq(0.001, 0.2, length.out = 5)
hyperLoss = 1000000
for(kInit in kInits){
for(tauInit in tauInit){
optimResults = optim(c(kInit, tauInit), hyperMatchLossFun,lower = c(0, 0), data = data)
if(optimResults$value == 1000000){
print("failed")
}
if(optimResults$value < hyperLoss){
hyperLoss= optimResults$value
hyperParas = optimResults$par
}
}
}
k = hyperParas[1]
print(hyperParas)
# make predictions for the hyperbolic model
data$pSSHatExp = expMatchPredict(expParas, data)
data$pSSHatHyper = hyperMatchPredict(hyperParas, data)
data = data %>% mutate(
smallRwd = pmin(leftRwd, rightRwd),
largeRwd = pmax(leftRwd, rightRwd),
smallwait = pmin(leftwait, rightwait),
largewait = pmax(leftwait, rightwait),
diffExpSV = exp(-c * smallwait) * smallRwd - exp(-c * largewait) * largeRwd,
diffHyperSV = smallRwd / (1 + k * smallwait) - largeRwd / (1 + k * largewait)
)
nCut = 7
limits = seq(min(data$diffHyperSV), max(data$diffHyperSV), length.out = nCut + 1)
limits[1] = min(data$diffHyperSV) - 0.1
limits[length(limits)] = max(data$diffHyperSV) + 0.1
mids = (head(limits, -1) + tail(limits, -1)) / 2
# plot for the hyperbolic model
data %>% mutate(
diffHyperSV= cut(diffHyperSV, breaks = limits)
) %>% mutate(
diffHyperSV = as.numeric(diffHyperSV),
preference = mids[diffHyperSV]
) %>%
group_by(preference) %>%
dplyr::summarise(mu = mean(SS),
se = sd(SS) / sqrt(length(SS)),
min = mu - se,
max = mu + se,
n = length(SS),
muHat = mean(pSSHatHyper)) %>%
ggplot(aes(preference, mu)) + geom_point() +
geom_errorbar(aes(ymin = min, ymax = max)) +
geom_line(aes(preference, muHat), linetype = "dashed") +
myTheme + xlab("Preference for SS") +
ylab("SS choice (%)") + ylim(c(0, 1)) +
ggtitle(sprintf("%s, k = %.2f, tau = %.2f", thisSub, hyperParas[1], hyperParas[2]))
ggsave(sprintf("figures/timeAnalysis/predict_%s.png", thisSub), width = 3, height = 4.5)
}
getwd()
